/**
 * SOLUCI√ìN 2: USANDO ASYNC/AWAIT
 *
 * Esta soluci√≥n utiliza la sintaxis moderna de async/await para manejar
 * operaciones as√≠ncronas de forma m√°s legible y secuencial.
 */

console.log("=== SOLUCI√ìN CON ASYNC/AWAIT ===\n");

let saldo = 1000;

/**
 * Funci√≥n que procesa una transacci√≥n de forma as√≠ncrona
 * @param {number} monto - Cantidad a debitar (negativo) o acreditar (positivo)
 * @param {string} descripcion - Descripci√≥n de la transacci√≥n
 * @returns {Promise<number>} Promesa que se resuelve con el nuevo saldo
 */
function procesarTransaccionAsync(monto, descripcion) {
    return new Promise((resolve) => {
        // Simula tiempo de procesamiento variable
        const tiempoProcesamiento = Math.random() * 3000;

        setTimeout(() => {
            const saldoAnterior = saldo;
            saldo += monto;

            console.log(`${descripcion}: ${monto > 0 ? '+' : ''}${monto} | Saldo: ${saldoAnterior} ‚Üí ${saldo}`);
            resolve(saldo);
        }, tiempoProcesamiento);
    });
}

/**
 * Funci√≥n principal que ejecuta todas las transacciones secuencialmente
 * usando async/await
 */
async function ejecutarTransacciones() {
    try {
        console.log(`Saldo inicial: ${saldo}`);

        // SOLUCI√ìN: Usamos await para esperar cada transacci√≥n
        await procesarTransaccionAsync(-200, "Pago de servicios");
        await procesarTransaccionAsync(150, "Dep√≥sito n√≥mina");
        await procesarTransaccionAsync(-100, "Compra supermercado");
        await procesarTransaccionAsync(75, "Transferencia recibida");
        await procesarTransaccionAsync(-50, "Comisi√≥n bancaria");

        console.log(`\n‚úÖ RESULTADO CORRECTO:`);
        console.log(`Saldo final: ${saldo}`);
        console.log(`Saldo esperado: 875`);
        console.log(`¬øCoinciden? ${saldo === 875 ? '‚úÖ S√≠' : '‚ùå No'}`);

        console.log(`\nüîß EXPLICACI√ìN DE LA SOLUCI√ìN:`);
        console.log(`   - async/await hace que el c√≥digo as√≠ncrono parezca s√≠ncrono`);
        console.log(`   - await pausa la ejecuci√≥n hasta que la Promise se resuelve`);
        console.log(`   - Cada transacci√≥n espera a que termine la anterior`);
        console.log(`   - El c√≥digo es m√°s legible que con .then()`);

        // Ejecutar ejemplo paralelo despu√©s de completar las transacciones principales
        await ejemploParaleloControlado();

    } catch (error) {
        console.error("Error en el procesamiento:", error);
    }
}

/**
 * EXTRA: EJEMPLO DE PROCESAMIENTO PARALELO CONTROLADO
 *
 * Si quisi√©ramos procesar algunas transacciones en paralelo pero
 * manteniendo control sobre el orden, podr√≠amos hacerlo as√≠:
 */
async function ejemploParaleloControlado() {
    console.log(`\n=== EJEMPLO: PROCESAMIENTO PARALELO CONTROLADO ===`);

    // Resetear saldo para este ejemplo
    saldo = 1000;
    console.log(`Saldo inicial para ejemplo paralelo: ${saldo}`);

    try {
        // Procesar dos transacciones en paralelo
        await Promise.all([
            procesarTransaccionAsync(-50, "Comisi√≥n A"),
            procesarTransaccionAsync(-30, "Comisi√≥n B")
        ]);

        // Luego procesar una transacci√≥n final
        await procesarTransaccionAsync(100, "Dep√≥sito final");

        console.log(`Saldo despu√©s del ejemplo paralelo: ${saldo}`);
        console.log(`Saldo esperado: 1020 (1000 - 50 - 30 + 100)`);
        console.log(`¬øCoinciden? ${saldo === 1020 ? '‚úÖ S√≠' : '‚ùå No'}`);

    } catch (error) {
        console.error("Error en procesamiento paralelo:", error);
    }
}

// Ejecutar las transacciones
ejecutarTransacciones();

/**
 * VENTAJAS DE ASYNC/AWAIT:
 *
 * ‚úÖ Legibilidad: C√≥digo que se lee como si fuera s√≠ncrono
 * ‚úÖ Manejo de errores: try/catch natural
 * ‚úÖ Debugging: M√°s f√°cil de depurar que promesas encadenadas
 * ‚úÖ Flexibilidad: F√°cil combinar con Promise.all() para paralelismo
 * ‚úÖ Menos anidaci√≥n: Evita el "callback hell" y "promise hell"
 *
 * CONSIDERACIONES:
 *
 * ‚ö†Ô∏è Compatibilidad: Requiere soporte de ES2017+
 * ‚ö†Ô∏è Funci√≥n async: Debe estar dentro de una funci√≥n async
 * ‚ö†Ô∏è Propagaci√≥n: Los errores se propagan como excepciones
 */
